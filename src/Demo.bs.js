// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Relude_IO = require("relude/src/Relude_IO.bs.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Relude_List = require("relude/src/Relude_List.bs.js");
var Relude_Option = require("relude/src/Relude_Option.bs.js");

var AppErrorType = { };

var IOAppError = Relude_IO.WithError(AppErrorType);

var $great$great$eq = IOAppError.Infix.$great$great$eq;

function makeNetworkRequest(path, networkBridge, param) {
  return Relude_IO.async(Curry._1(networkBridge, path));
}

function isMoveLegalRequest(networkBridge, c1, c2) {
  return Relude_IO.suspendIO((function (param) {
                return Relude_IO.async(Curry._1(networkBridge, "api/move_legality"));
              }));
}

function attemptMoveCommand(state, networkBridge) {
  return Relude_IO.map((function (c) {
                return {
                        cards: c,
                        other: state.other
                      };
              }), Relude_IO.map((function (param) {
                    var state$1 = state;
                    var legal = param;
                    if (legal) {
                      var c = state$1.cards;
                      var num = Relude_Option.getOrElse(5, Relude_List.head(Caml_array.caml_array_get(c, 0)));
                      var newCards = $$Array.copy(c);
                      Caml_array.caml_array_set(newCards, 1, Relude_List.append(num, Caml_array.caml_array_get(c, 1)));
                      Caml_array.caml_array_set(newCards, 0, /* [] */0);
                      return newCards;
                    } else {
                      return state$1.cards;
                    }
                  }), Relude_IO.suspendIO((function (param) {
                        return Relude_IO.async(Curry._1(networkBridge, "api/move_legality"));
                      }))));
}

function testRequestSuccessLegalMove(param) {
  var passthroughNetworkBridge = function (param, onDone) {
    return Curry._1(onDone, /* Ok */Block.__(0, [true]));
  };
  var cards = [
    /* :: */[
      1,
      /* [] */0
    ],
    /* :: */[
      2,
      /* [] */0
    ]
  ];
  var state = {
    cards: cards,
    other: 5
  };
  return Relude_IO.unsafeRunAsync((function (r) {
                if (r.tag) {
                  console.log(r[0]);
                  return /* () */0;
                } else {
                  var s = r[0];
                  console.log(Caml_array.caml_array_get(s.cards, 0) === /* [] */0);
                  console.log(Caml_obj.caml_equal(Caml_array.caml_array_get(s.cards, 1), /* :: */[
                            2,
                            /* :: */[
                              1,
                              /* [] */0
                            ]
                          ]));
                  return /* () */0;
                }
              }), attemptMoveCommand(state, passthroughNetworkBridge));
}

function testRequestSuccessIllegalMove(param) {
  var cards = [
    /* :: */[
      1,
      /* [] */0
    ],
    /* :: */[
      2,
      /* [] */0
    ]
  ];
  var state = {
    cards: cards,
    other: 5
  };
  var passthroughNetworkBridge = function (param, onDone) {
    return Curry._1(onDone, /* Error */Block.__(1, ["error"]));
  };
  return Relude_IO.unsafeRunAsync((function (r) {
                if (r.tag) {
                  console.log("true");
                  return /* () */0;
                } else {
                  console.log("false");
                  return /* () */0;
                }
              }), attemptMoveCommand(state, passthroughNetworkBridge));
}

testRequestSuccessLegalMove(/* () */0);

testRequestSuccessIllegalMove(/* () */0);

var L = /* alias */0;

var IO = /* alias */0;

var Opt = /* alias */0;

exports.L = L;
exports.IO = IO;
exports.Opt = Opt;
exports.AppErrorType = AppErrorType;
exports.IOAppError = IOAppError;
exports.$great$great$eq = $great$great$eq;
exports.makeNetworkRequest = makeNetworkRequest;
exports.isMoveLegalRequest = isMoveLegalRequest;
exports.attemptMoveCommand = attemptMoveCommand;
exports.testRequestSuccessLegalMove = testRequestSuccessLegalMove;
exports.testRequestSuccessIllegalMove = testRequestSuccessIllegalMove;
/* IOAppError Not a pure module */
